<script type="text/javascript">
    var productOptionNames = [];
    var productOptionValues = [];
    {% for product_option in product.options_with_values %}
        productOptionNames.push("{{ product_option.name | replace: '"', '\\"' }}");
    {% endfor %}

    var variants = [];
    {% for variant in product.variants %}
		variants.push({id: {{variant.id}}, "{{ product.options_with_values[0].name | replace: '"', '\\"' }}": "{{variant.option1 | replace: '"', '\\"'}}", "{{ product.options_with_values[1].name | replace: '"', '\\"' }}": "{{variant.option2 | replace: '"', '\\"'}}", "{{ product.options_with_values[2].name | replace: '"', '\\"' }}": "{{variant.option3 | replace: '"', '\\"'}}"});
    {% endfor %}

    //console.log('productOptionNames: '+productOptionNames);
    //console.log('productOptionValues: '+productOptionValues[0]);
  	//var result = variants.find( ({ option1 }) => option1 === '12mm (1/2 in.)' );
    console.log('variants: '+JSON.stringify(variants[0]));
    
    function setDefaultOption(select)
    {
        selectName = select.name;
        optionText = "Select " + selectName.match(/\[(.*?)\]/)[1] + "..."

        //build the option that is going to be inserted into the drop down box
        var option = document.createElement("option");
        option.text = optionText;

        //only trigger this option if there is no pre-selected variant. i.e. the url doesn't have a "?variant=1234" value.
        const urlParams = new URLSearchParams(window.location.search);
        if(!urlParams.has('variant')) {
            option.selected = true;
        }

        //add the option to the selector at the top
        select.add(option, select[0]);
    }


    function removeOptions(selectElement) {
         var i, L = selectElement.options.length - 1;
         for(i = L; i >= 0; i--) {
         	selectElement.remove(i);
         }
    }

  	function findSelectIndex(select){
        selectName = select.name;
        optionText = selectName.match(/\[(.*?)\]/)[1];
        selectorIndex = productOptionNames.indexOf(optionText);
    }
  
    function findOptions(select) {

      	parent = selects[selectorIndex - 1].value;
        //console.log('option: '+option);
        //console.log('searchString: '+parent);
		//var selectVariants = variants.filter((({ option1 }) => option1 === searchString));
      	
      	console.log('selectVariants: '+JSON.stringify(selectVariants));
      	return selectVariants;
    }
  
    function buildOptions(select,parentSelect)
    {
        var parentSelectName = parentSelect.name;
        var optionText = parentSelectName.match(/\[(.*?)\]/)[1];
        var filteredVariants = variants.filter((item)=>item[optionText] === parentSelect.value);

      	Array.prototype.forEach.call(filteredVariants, function(variants) {
          	Array.prototype.forEach.call(variants, function(variant) {
              console.log(select);
				var option = document.createElement("option");
              	option.text = variant.value;
              	select.add(option);
			});
        });
        //console.log('select: '+select);
        //console.log('parent: '+parent);;
      	/*
        removeOptions(select);
        Array.prototype.forEach.call(select, function(option, i) {
          	var result = undefined;
            console.log('option2-'+i+': '+option.value);
          	//console.log('option1-'+i+': '+parent);
          	result = variants.filter((({ option1 }) => option1 === parent));
          	//console.log('parent'+i+': '+JSON.stringify(result));
          	result = result.find((({ option2 }) => option2 === option.value));
          	console.log('result'+i+': '+JSON.stringify(result));
            if(result){
              	console.log('adding');
				var option = document.createElement("option");
              	option.text = option.value;
              	select.add(option);
            }
        });
        */
    }
  
    function modifySelect(select,parentSelect)
    {
      	const selectIndex = findSelectIndex(select);
      	const selectContainers = document.getElementsByClassName("product-form__input product-form__input--dropdown");
        if(selects[selectorIndex - 1].selectedIndex == 0){
          selectContainers[selectorIndex].style.display = 'none';
        } else {
          removeOptions(select);
          setDefaultOption(select);
          buildOptions(select,parentSelect);
          selectContainers[selectorIndex].style.display = '';
		}
    }

    const selects = document.getElementsByClassName("select__select");
  	setDefaultOption(selects[0]);
    switch (selects.length) {
      	case 1:    	
        break;
      	case 2:
        	modifySelect(selects[1],selects[0]);
        	selects[0].addEventListener('change', function() {modifySelect(selects[1],selects[0])});
        break;
      	case 3:
        	modifySelect(selects[1]);
        	modifySelect(selects[2]);
            selects[0].addEventListener('change', function() {modifySelect(selects[1])});
        	selects[1].addEventListener('change', function() {modifySelect(selects[2])});
        break;
    }
</script>