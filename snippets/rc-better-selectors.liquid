{% if request.page_type == 'product' %}
    <script type="text/javascript">
      function removeOptions(selectElement) {
         var i, L = selectElement.options.length - 1;
         for(i = L; i >= 0; i--) {
            selectElement.remove(i);
         }
      }
      
      var Shopify = Shopify || {};
      const selects = document.getElementsByClassName("select__select");
      Shopify.optionsMap = {};

      Shopify.updateOptionsInSelector = function(selectorIndex) {

        switch (selectorIndex) {
          case 0:
            var key = 'root';
            var selector = selects[0];
            break;
          case 1:
            var key = selects[0].value;
            var selector = selects[1];
            break;
          case 2:
            var key = selects[0].value;  
            key += ' / ' + selects[1].value;
            var selector = selects[2];
        }
        console.log("key: "+key);
        var initialValue = undefined;
        removeOptions(selector);
        var availableOptions = Shopify.optionsMap[key];
        console.log('availableOptions: ' + availableOptions);
        for (var i=0; i<availableOptions.length; i++) {
          var option = availableOptions[i];
          //var newOption = jQuery('<option></option>').val(option).html(option);
          var newOption = document.createElement("option");
          newOption.value = option;
          selector.add(newOption);
          //selector.append(newOption);
        }

        if (jQuery.inArray(initialValue, availableOptions) !== -1) {
          selector.val(initialValue);
        }
        selector.trigger('change');  
      }
      
      Shopify.linkOptionSelectors = function(product) {
        // Building our mapping object.
        for (var i=0; i<product.variants.length; i++) {
          var variant = product.variants[i];
          if (variant.available) {
            // Gathering values for the 1st drop-down.
            Shopify.optionsMap['root'] = Shopify.optionsMap['root'] || [];
            Shopify.optionsMap['root'].push(variant.option1);
            Shopify.optionsMap['root'] = Shopify.uniq(Shopify.optionsMap['root']);
            // Gathering values for the 2nd drop-down.
            if (product.options.length > 1) {
              var key = variant.option1;
              Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
              Shopify.optionsMap[key].push(variant.option2);
              Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
            }
            // Gathering values for the 3rd drop-down.
            if (product.options.length === 3) {
              var key = variant.option1 + ' / ' + variant.option2;
              Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
              Shopify.optionsMap[key].push(variant.option3);
              Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
            }
          }
        }
      }
      {% if product.available and product.options.size > 1 %}
        var $addToCartForm = $('form[action="/cart/add"]');
        if (window.MutationObserver && $addToCartForm.length) {
          if (typeof observer === 'object' && typeof observer.disconnect === 'function') {
            observer.disconnect();
          }
          var config = { childList: true, subtree: true };
          var observer = new MutationObserver(function() {      
            Shopify.linkOptionSelectors({{ product | json }});
            observer.disconnect();
          });  
          observer.observe($addToCartForm[0], config);
        }
      {% endif %}
    </script>
{% endif %}